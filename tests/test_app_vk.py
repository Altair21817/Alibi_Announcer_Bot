# –ù–∏—á–µ–≥–æ –Ω–µ –≤–≤–æ–¥–∏—Ç—å
# –í–≤–æ–¥–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
# –í–≤–æ–¥–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# –í–≤–æ–¥–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö

from project.data.app_data import MEDALS, VK_POST_LINK, VK_GROUP_TARGET

from tests.test_main import GREEN_PASSED, NL, RED_FAILED

from tests.vk_wall_examples import (
    DETECTIT_STOP_LIST,
    EXAMPLE_CHECKIN, EXAMPLE_GAME_RESULTS, EXAMPLE_OTHER,
    EXAMPLE_PRIZE_RESULTS, EXAMPLE_PREVIEW, EXAMPLE_RATING, EXAMPLE_TEAMS)

from project.app_vk import (
    define_post_topic, game_dates_add_weekday_place, get_post_image_url,
    parse_post_checkin, parse_post_game_results, parse_post_preview,
    parse_post_stop_list, split_post_text)


def test_define_post_topic():
    post_topic_pairs: dict[dict, str] = [
        (EXAMPLE_CHECKIN, 'checkin'),
        (EXAMPLE_GAME_RESULTS, 'game_results'),
        (EXAMPLE_OTHER, 'other'),
        (EXAMPLE_PRIZE_RESULTS, 'prize_results'),
        (EXAMPLE_PREVIEW, 'preview'),
        (EXAMPLE_RATING, 'rating'),
        (EXAMPLE_TEAMS, 'teams')]
    errors: list = []
    for post, expected in post_topic_pairs:
        try:
            result: str = define_post_topic(post=post)
            assert result == expected
        except AssertionError:
            errors.append((result, expected))
    if not errors:
        print(f'test_define_post_topic {GREEN_PASSED}')
    else:
        print(f'test_define_post_topic {RED_FAILED}')
        for result, expected in errors:
            print(
                f"Expected: '{expected}'{NL}"
                f"     Got: '{result}'")
    return


def test_game_dates_add_weekday_place():
    game_dates_input: list[str] = [
        '17 –º–∞—Ä—Ç–∞, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–æ–π',
        '21 –∞–ø—Ä–µ–ª—è, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–π',
        '23 –º–∞—Ä—Ç–∞, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–æ–π',
        '31 –¥–µ–∫–∞–±—Ä—è, 23:59 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –Ω–∏–≥–¥–µ',
        '01 —è–Ω–≤–∞—Ä—è, 00:00 ‚Äî ']
    # Results are valid until December 31th 2023 23:59!
    game_dates_expected: list[str] = [
        '17 –º–∞—Ä—Ç–∞ (–≤—Å), 19:00 ‚Äî –î–≤–æ—Ä–µ—Ü ¬´–û–ª–∏–º–ø–∏—è¬ª '
        '(–õ–∏—Ç–µ–π–Ω—ã–π –ø—Ä., –¥. 14, —Å—Ç.–º. –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∞—è)',
        '21 –∞–ø—Ä–µ–ª—è (–ø—Ç), 19:00 ‚Äî ParkKing '
        '(–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ü–∞—Ä–∫, 4, —Å—Ç.–º. –ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è)',
        '23 –º–∞—Ä—Ç–∞ (—Å–±), 19:00 ‚Äî –¶–∏–Ω—å '
        '(16-—è –ª–∏–Ω. B.O., 83, —Å—Ç.–º. –í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è)',
        '31 –¥–µ–∫–∞–±—Ä—è (–≤—Å), 23:59 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –Ω–∏–≥–¥–µ',
        '01 —è–Ω–≤–∞—Ä—è (–ø–Ω), 00:00 ‚Äî ']
    date_format: list = game_dates_add_weekday_place(
        game_dates=game_dates_input)
    errors: list = []
    for date in range(len(game_dates_expected)):
        try:
            result: str = date_format[date]
            expected: str = game_dates_expected[date]
            assert result == expected
        except AssertionError:
            errors.append((result, expected))
    if not errors:
        print(f'test_game_dates_add_weekday_place {GREEN_PASSED}')
    else:
        print(f'test_game_dates_add_weekday_place {RED_FAILED}')
        for result, expected in errors:
            print(
                f"Expected: '{expected}'{NL}"
                f"     Got: '{result}'")
    return


def test_get_post_image_url():
    post_photo_urls: dict = {
        'correct_post_photo': {
            'input': {
                'attachments': [
                    {'photo': {
                        'sizes': [
                            None,
                            None,
                            None,
                            None,
                            {'url': 'http://some-url.com'}]}}]},
            'input_type': 'photo',
            'expected': 'http://some-url.com'},
        'uncorrect_url_post_photo': {
            'input': {
                'attachments': [
                    {'photo': {
                        'sizes': [
                            None,
                            None,
                            None,
                            None,
                            {'url': 'some-url.com'}]}}]},
            'input_type': 'photo',
            'expected': None},
        'uncorrect_key_post_photo': {
            'input': {'no_attachments': []},
            'input_type': 'photo',
            'expected': None},
        'correct_post_album': {
            'input': {
                'attachments': [
                    {'album': {
                        'thumb': {
                            'sizes': [
                                None,
                                None,
                                None,
                                {'url': 'http://some-url.com'}]}}}]},
            'input_type': 'album',
            'expected': 'http://some-url.com'},
        'uncorrect_url_post_album': {
            'input': {
                'attachments': [
                    {'album': {
                        'thumb': {
                            'sizes': [
                                None,
                                None,
                                None,
                                {'url': 'some-url.com'}]}}}]},
            'input_type': 'album',
            'expected': None},
        'uncorrect_key_post_album': {
            'input': {'no_attachments': []},
            'input_type': 'album',
            'expected': None}}
    errors: list = []
    for test_name in post_photo_urls:
        try:
            test_data: dict = post_photo_urls[test_name]
            result: str = get_post_image_url(
                post=test_data['input'], block=test_data['input_type'])
            expected: str = test_data['expected']
            assert result == expected
        except AssertionError:
            errors.append((test_name, result, expected))
    if not errors:
        print(f'test_get_post_image_url {GREEN_PASSED}')
    else:
        print(f'test_get_post_image_url {RED_FAILED}')
        for test_name, result, expected in errors:
            print(
                f"in test data: '{test_name}'{NL}"
                f"Expected: '{expected}'{NL}"
                f"     Got: '{result}'")
    return


def test_parse_post_checkin():
    post_id: int = EXAMPLE_CHECKIN['id']
    split_text: list[str] = split_post_text(EXAMPLE_CHECKIN['text'])
    expected_text: list[str] = [
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. India',
        '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:',
        'https://vk.com/app5619682_-40914100',
        '–î–µ–π—Å—Ç–≤—É–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞ –≤—Å—é –∫–æ–º–∞–Ω–¥—É! '
        '–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤ –Ω–µ–º —É—á–∞—Å—Ç–∏–µ, –Ω—É–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞—Ç—å '
        '—Ä–µ–ø–æ—Å—Ç —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏:\n'
        f"{VK_POST_LINK}{VK_GROUP_TARGET}_{post_id}"]
    errors: list = []
    result_text = parse_post_checkin(split_text=split_text, post_id=post_id)
    try:
        assert len(result_text) == len(expected_text)
    except AssertionError:
        print(
            f'test_parse_post_checkin {RED_FAILED}{NL}'
            f"Expected: {len(expected_text)} abstracts{NL}"
            f"     Got: {len(result_text)} abstracts")
        return
    for result, expected in zip(result_text, expected_text):
        try:
            assert result.strip() == expected
        except AssertionError:
            errors.append((result, expected))
    if not errors:
        print(f'test_parse_post_checkin {GREEN_PASSED}')
    else:
        print(f'test_parse_post_checkin {RED_FAILED}')
        for result, expected in errors:
            print(
                f"Expected: '{expected}'{NL}"
                f"     Got: '{result}'")
    return


def test_parse_post_game_results():
    expected_text_base: list[str] = [
        '–ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –Ω–æ–≤—ã–µ –∏–≥—Ä—ã! –í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ –Ω–∞ '
        '–ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–π –º—ã —Å –≤–∞–º–∏ –Ω–∞—á–∞–ª–∏ —Å–µ—Ä–∏—é India. –ò —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è '
        '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–≤–æ–π –∏–≥—Ä—ã.',
        '‚ñ™5 –º–µ—Å—Ç–æ: ¬´–†–µ—á–µ–≤—ã–µ –∞—É—Ç–∏—Å—Ç—ã¬ª',
        '–ù—É, –±–ª–∞–≥–æ —Ä–µ—á—å –Ω–∞ –∏–≥—Ä–µ –Ω—É–∂–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å ‚Äî –≤—Å–µ –æ—Ç–≤–µ—Ç—ã '
        '–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –ø–∏—Å—å–º–µ–Ω–Ω–æ–º –≤–∏–¥–µ. –ò —Å —ç—Ç–∏–º –∫–æ–º–∞–Ω–¥–∞ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å '
        '–æ—Ç–ª–∏—á–Ω–æ üéâ',
        '‚ñ™4 –º–µ—Å—Ç–æ: ¬´–ë–æ—Å—Å –º–æ–ª–æ–∫–æ—Å–æ—Å –∏ –∫–æ–º–ø–∞–Ω–∏—è¬ª',
        '–û—Ö —É–∂ —ç—Ç–æ—Ç –ø—è—Ç—ã–π —Ç—É—Ä‚Ä¶ –ù–æ –Ω–∞—à –æ–ø—ã—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: —Ç–µ, –∫—Ç–æ —É–≤–µ—Ä–µ–Ω–Ω–æ '
        '–¥–µ—Ä–∂–∞–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–π –∏–≥—Ä—ã, –Ω–µ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å—Ç—Ä–∞–¥–∞—é—Ç –æ—Ç –Ω–µ—É–¥–∞—á–∏ –≤ '
        '—Å–∞–º–æ–º –∫–æ–Ω—Ü–µ. –¢–∞–∫ –∏ –≤—ã—à–ª–æ üéä',
        '‚ñ™3 –º–µ—Å—Ç–æ: ¬´–ö–æ—Ç–∏–∫–∏ –ö–∏–∞–Ω—É –†–∏–≤–∑–∞¬ª',
        '–í—Å–µ–º –∫–æ—Ç–∏–∫–∞–º ‚Äî –ø–æ –º–µ–¥–∞–ª–∏. –ë—Ä–æ–Ω–∑–æ–≤–æ–π! üê±',
        '‚ñ™2 –º–µ—Å—Ç–æ: ¬´–ú—ã —Ç–∞–∫ –∏ –¥—É–º–∞–ª–∏¬ª',
        '–î—É–º–∞—Ç—å ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ. –•–æ—Ä–æ—à–æ –¥—É–º–∞—Ç—å ‚Äî –µ—â—ë –ª—É—á—à–µ. –û—Ç —ç—Ç–æ–≥–æ –±—ã–≤–∞—é—Ç '
        '–ø–µ—Ä–≤—ã–µ –º–µ—Å—Ç–∞, –Ω–∞–≥—Ä–∞–¥—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏—è—Ç–Ω—ã–µ —à—Ç—É–∫–∏ üòâ',
        '‚ñ™1 –º–µ—Å—Ç–æ: ¬´–í–∏–Ω—Ç–∞–∂–Ω—ã–π –≥–∞–∑–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä¬ª',
        '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –º—ã—Å–ª–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ü•Ç',
        '–ê –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë —á–µ—Ç—ã—Ä–µ –∏–≥—Ä—ã! –ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —Å–ø—Ä–∞–≤—è—Ç—Å—è –¥—Ä—É–≥–∏–µ '
        '–¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞.']
    expected_text_base_len = len(expected_text_base)
    expected_dict = {
        'team_out': {
            'team_name': '13sda112fdssf3',
            'expected_text_last': expected_text_base[-1],
            'expected_len': expected_text_base_len},
        'team_5th': {
            'team_name': '–†–µ—á–µ–≤—ã–µ –∞—É—Ç–∏—Å—Ç—ã',
            'expected_text_last': MEDALS['5th'][0],
            'expected_len': expected_text_base_len + 1},
        'team_4th': {
            'team_name': '–ë–æ—Å—Å –º–æ–ª–æ–∫–æ—Å–æ—Å –∏ –∫–æ–º–ø–∞–Ω–∏—è',
            'expected_text_last': MEDALS['4th'][0],
            'expected_len': expected_text_base_len + 1},
        'team_3th': {
            'team_name': '–ö–æ—Ç–∏–∫–∏ –ö–∏–∞–Ω—É –†–∏–≤–∑–∞',
            'expected_text_last': MEDALS['3th'][0],
            'expected_len': expected_text_base_len + 1},
        'team_2th': {
            'team_name': '–ú—ã —Ç–∞–∫ –∏ –¥—É–º–∞–ª–∏',
            'expected_text_last': MEDALS['2th'][0],
            'expected_len': expected_text_base_len + 1},
        'team_1th': {
            'team_name': '–í–∏–Ω—Ç–∞–∂–Ω—ã–π –≥–∞–∑–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
            'expected_text_last': MEDALS['1th'][0],
            'expected_len': expected_text_base_len + 1}}
    errors: list = []
    for team in expected_dict:
        try:
            split_text: list[str] = split_post_text(
                EXAMPLE_GAME_RESULTS['text'])
            data: dict[str] = expected_dict[team]
            result_text: list = parse_post_game_results(
                split_text=split_text, team_name=data['team_name'])
            result: int = len(result_text)
            expected: int = data['expected_len']
            assert result == expected
            result = result_text[-1]
            expected = data['expected_text_last']
            assert result == expected
        except AssertionError:
            errors.append((team, result, expected))
    if not errors:
        print(f'parse_post_game_results {GREEN_PASSED}')
    else:
        print(f'parse_post_game_results {RED_FAILED}')
        for team, result, expected in errors:
            print(
                f"For team: {team}{NL}"
                f"Expected: '{expected}'{NL}"
                f"     Got: '{result}'")
    return




def test_parse_post_preview():
    # Results are valid until March 27th 2023 23:59!
    expected_game_dates = [
        '27 –º–∞—Ä—Ç–∞ (—Å—Ä), 19:00 ‚Äî ParkKing '
        '(–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ü–∞—Ä–∫, 4, —Å—Ç.–º. –ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è)',
        '28 –º–∞—Ä—Ç–∞ (—á—Ç), 19:00 ‚Äî ParkKing '
        '(–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ü–∞—Ä–∫, 4, —Å—Ç.–º. –ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è)',
        '30 –º–∞—Ä—Ç–∞ (—Å–±), 19:00 ‚Äî –î–≤–æ—Ä–µ—Ü ¬´–û–ª–∏–º–ø–∏—è¬ª '
        '(–õ–∏—Ç–µ–π–Ω—ã–π –ø—Ä., –¥. 14, —Å—Ç.–º. –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∞—è)',
        '2 –∞–ø—Ä–µ–ª—è (–≤—Å), 19:00 ‚Äî –î–≤–æ—Ä–µ—Ü ¬´–û–ª–∏–º–ø–∏—è¬ª '
        '(–õ–∏—Ç–µ–π–Ω—ã–π –ø—Ä., –¥. 14, —Å—Ç.–º. –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∞—è)',
        '3 –∞–ø—Ä–µ–ª—è (–ø–Ω), 19:00 ‚Äî ParkKing '
        '(–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ü–∞—Ä–∫, 4, —Å—Ç.–º. –ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è)'
    ]
    expected_text = [
        '–ê–Ω–æ–Ω—Å. India',
        '–ò–Ω–¥–∏—è, 2006 –≥–æ–¥.',
        '–ú–µ–∂–¥—É —Å–µ–∑–æ–Ω–∞–º–∏ –º–æ–Ω—Å—É–Ω–æ–≤, –∑–∞—Ç—è–∂–Ω—ã—Ö –¥–æ–∂–¥–µ–π, –≤–æ–ª–Ω–∞ –∂–µ—Å—Ç–æ–∫–∏—Ö, –∫—Ä–æ–≤–∞–≤—ã—Ö '
        '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∑–∞—Ö–ª–µ—Å—Ç–Ω—É–ª–∞ —Å–µ–≤–µ—Ä –ò–Ω–¥–∏–∏. –ú–∞—Å—Å–æ–≤—ã–µ —É–±–∏–π—Å—Ç–≤–∞ –º–µ—Å—Ç–Ω—ã—Ö –∏ '
        '—Ç—É—Ä–∏—Å—Ç–æ–≤ –¥–µ—Ä–∂–∞–ª–∏ –ª—é–¥–µ–π –≤ —É–∂–∞—Å–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤. –ü–∞—Ä–∞ '
        '—Ñ—Ä–∞–Ω—Ü—É–∑–æ–≤, —Ç—É—Ä–∏—Å—Ç –∏–∑ –ë—Ä–∞–∑–∏–ª–∏–∏, –∞ –∂–µ—Ä—Ç–≤—ã —Å—Ä–µ–¥–∏ –º–µ—Å—Ç–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –∏ '
        '–≤–æ–≤—Å–µ –∏—Å—á–∏—Å–ª—è–ª–∏—Å—å –¥–µ—Å—è—Ç–∫–∞–º–∏...',
        '–í—Å–µ –≤ –ø–æ—Ä–µ–∑–∞—Ö. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ ‚Äî –±–µ–∑ –≥–ª–∞–∑. –ò —Å –∫—É–ª–æ–Ω–∞–º–∏ –≤ —Ñ–æ—Ä–º–µ '
        '–ø–æ–ª—É–º–µ—Å—è—Ü–∞ –Ω–∞ —à–µ–µ. –ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ? –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è',
        #  '–î–µ—Ç–µ–∫—Ç–∏–≤—ã, –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –ò–Ω–¥–∏—é, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å '
        #  '–¥–∞—Ç—ã —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:',
        #  '‚Äî 27 –º–∞—Ä—Ç–∞, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–π;',
        #  '‚Äî 28 –º–∞—Ä—Ç–∞, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–π;',
        #  '‚Äî 30 –º–∞—Ä—Ç–∞, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–æ–π;',
        #  '‚Äî 2 –∞–ø—Ä–µ–ª—è, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–æ–π;',
        #  '‚Äî 3 –∞–ø—Ä–µ–ª—è, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–π.',
        '–°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 22 –º–∞—Ä—Ç–∞ –≤ 18:05.',
        # '–ü–µ—Ä–≤—ã–µ 5 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥ –∏–≥—Ä–∞—é—Ç –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π '
        # '—Ü–µ–Ω–µ ‚Äî 400 —Ä—É–±–ª–µ–π —Å –¥–µ—Ç–µ–∫—Ç–∏–≤–∞! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è '
        # '–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã.,
        # '#alibispb #alibi_preview #–Ω–æ–≤—ã–π–ø—Ä–æ–µ–∫—Ç #–°–æ–æ–±—â–µ–Ω–∏–µ–æ–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–∏'
    ]
    result_game_dates, result_text = parse_post_preview(
        post_text=EXAMPLE_PREVIEW['text'],
        split_text=split_post_text(post_text=EXAMPLE_PREVIEW['text']))
    errors: list = []
    for (result, expected) in zip(
            result_game_dates + result_text,
            expected_game_dates + expected_text):
        try:
            result = result.strip()
            assert result == expected
        except AssertionError:
            errors.append((result, expected))
    if not errors:
        print(f'test_parse_post_preview {GREEN_PASSED}')
    else:
        print(f'test_parse_post_preview {RED_FAILED}')
        for result, expected in errors:
            print(
                f"Expected: '{expected}'{NL}"
                f"     Got: '{result}'")
    return


def test_parse_post_stop_list():
    split_text: list = ['–¢–µ–∫ ‚Ññ1', '–¢–µ–∫ ‚Ññ2', '–¢–µ–∫ —É–¥–∞–ª–∏—Ç—å']
    teams: dict = {
        'exists_team': [
            '–ü–∏–Ω–≥–≤–∏–Ω—ãssssssssssss',
            ['–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ø—É—â–µ–Ω–∞ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–∏—é –∏–≥—Ä!',
             '–¢–µ–∫ ‚Ññ1',
             '–¢–µ–∫ ‚Ññ2']],
        'non_exists_team': [
            '–ü–∏–Ω–≥–≤–∏–Ω—ã',
            ['–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –±—ã–ª–∞ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å–µ—Ä–∏–∏ –∏–≥—Ä!',
             '–¢–µ–∫ ‚Ññ1',
             '–¢–µ–∫ ‚Ññ2']]}
    errors: list = []
    for team in teams:
        try:
            data: list = teams[team]
            result: list = parse_post_stop_list(
                post=DETECTIT_STOP_LIST,
                split_text=split_text,
                team_name=data[0])
            expected: list = data[1]
            assert result == expected
        except AssertionError:
            errors.append((result, expected))
    if not errors:
        print(f'test_parse_post_stop_list {GREEN_PASSED}')
    else:
        print(f'test_parse_post_stop_list {RED_FAILED}')
        for result, expected in errors:
            print(
                f"Expected: '{expected}'{NL}"
                f"     Got: '{result}'")
    return


def test_split_post_text() -> bool:
    post_text: str = (
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. India\n'
        '–ò–Ω–¥–∏—è, 2006 –≥–æ–¥.\n\n'
        '–ú–µ–∂–¥—É —Å–µ–∑–æ–Ω–∞–º–∏ –º–æ–Ω—Å—É–Ω–æ–≤, –≤–æ–ª–Ω–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∑–∞—Ö–ª–µ—Å—Ç–Ω—É–ª–∞ —Å–µ–≤–µ—Ä –ò–Ω–¥–∏–∏. '
        '–ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ? –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è\n \n'
        '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: \n'
        'https://vk.com/app5619682_-40914100\n    \n'
        '#alibispb #alibi_checkin #–Ω–æ–≤—ã–π–ø—Ä–æ–µ–∫—Ç #–°–æ–æ–±—â–µ–Ω–∏–µ–æ–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–∏\n')
    expected_text: list[str] = [
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. India',
        '–ò–Ω–¥–∏—è, 2006 –≥–æ–¥.',
        '–ú–µ–∂–¥—É —Å–µ–∑–æ–Ω–∞–º–∏ –º–æ–Ω—Å—É–Ω–æ–≤, –≤–æ–ª–Ω–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∑–∞—Ö–ª–µ—Å—Ç–Ω—É–ª–∞ —Å–µ–≤–µ—Ä –ò–Ω–¥–∏–∏. '
        '–ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ? –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è',
        '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:',
        'https://vk.com/app5619682_-40914100']
    errors: list = []
    result_text = split_post_text(post_text=post_text)
    try:
        assert len(result_text) == len(expected_text)
    except AssertionError:
        print(
            f'test_split_post_text {RED_FAILED}{NL}'
            f"Expected: {len(expected_text)} abstracts{NL}"
            f"     Got: {len(result_text)} abstracts")
        return
    for i in range(len(result_text)-1):
        try:
            result = result_text[i].strip()
            expected = expected_text[i]
            assert result == expected
        except AssertionError:
            errors.append((result, expected))
    if not errors:
        print(f'test_split_post_text {GREEN_PASSED}')
        return True
    else:
        print(f'test_split_post_text {RED_FAILED}')
        for result, expected in errors:
            print(
                f"Expected: '{expected}'{NL}"
                f"     Got: '{result}'")
    return False
