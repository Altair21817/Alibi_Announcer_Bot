import pytest
import sys
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

from project.app_vk import (
    define_post_topic, make_link_to_post, parse_message, parse_post,
    _game_dates_add_weekday_place, _get_post_image_url, _get_vk_chat_update,
    _get_vk_wall_update, _parse_post_add_link, _parse_post_checkin,
    _parse_post_game_results, _parse_post_other, _parse_post_preview,
    _parse_post_prize_results, _parse_post_teams, _parse_post_stop_list,
    _split_paragraphs)

from project.data.app_data import TEAM_NAME, TEAM_CAPITAN_PROP

from vk_wall_examples import (
    A_EXAMPLE_CHECKIN, A_EXAMPLE_GAME_RESULTS, A_EXAMPLE_OTHER,
    A_EXAMPLE_PREVIEW, A_EXAMPLE_PRIZE_RESULTS,
    A_EXAMPLE_RATING, A_EXAMPLE_TASKS, A_EXAMPLE_TEAMS,

    D_EXAMPLE_CHECKIN, D_EXAMPLE_GAME_RESULTS,
    D_EXAMPLE_PHOTOS, D_EXAMPLE_PREVIEW, D_EXAMPLE_PRIZE_RESULTS,
    D_EXAMPLE_STOP_LIST, D_EXAMPLE_TEAMS)

NL: str = '\n'


@pytest.mark.dependency(name="test_split_paragraphs")
@pytest.mark.parametrize('group_name, text, splitted_text', [
    ('Alibi', 'One\nTwo\n\nThree\n\n\nFour\n\n\n\nEnd.',
     ['üü£ Alibi', 'One', 'Two', 'Three', 'Four', 'End.']),
    ('Detectit', 'One\nTwo\n\nThree\n\n\nFour\n\n\n\nEnd.',
     ['‚ö´Ô∏è Detectit', 'One', 'Two', 'Three', 'Four', 'End.'])])
def test_split_paragraphs(group_name, text, splitted_text):
    """Test test_split_paragraphs func from app_vk."""
    assert _split_paragraphs(group_name=group_name, text=text) == splitted_text


@pytest.mark.dependency(name="test_define_post_topic")
@pytest.mark.parametrize('post_example, expected_topic', [
    (A_EXAMPLE_CHECKIN, 'checkin'),
    (A_EXAMPLE_GAME_RESULTS, 'game_results'),
    (A_EXAMPLE_OTHER, 'other'),
    # (A_EXAMPLE_PHOTOS, TypeError),
    (A_EXAMPLE_PREVIEW, 'preview'),
    (A_EXAMPLE_PRIZE_RESULTS, 'prize_results'),
    (A_EXAMPLE_RATING, 'rating'),
    # (A_EXAMPLE_STOP_LIST, TypeError),
    (A_EXAMPLE_TASKS, 'tasks'),
    (A_EXAMPLE_TEAMS, 'teams'),
    (D_EXAMPLE_CHECKIN, 'checkin'),
    (D_EXAMPLE_GAME_RESULTS, 'game_results'),
    # (D_EXAMPLE_OTHER, TypeError),
    (D_EXAMPLE_PHOTOS, 'photos'),
    (D_EXAMPLE_PREVIEW, 'preview'),
    (D_EXAMPLE_PRIZE_RESULTS, 'prize_results'),
    # (D_EXAMPLE_RATING, TypeError),
    (D_EXAMPLE_STOP_LIST, 'stop-list'),
    # (D_EXAMPLE_TASKS, TypeError),
    (D_EXAMPLE_TEAMS, 'teams')])
def test_define_post_topic(post_example, expected_topic) -> None:
    """Test define_post_topic func from app_vk."""
    assert define_post_topic(post_example) == expected_topic


@pytest.mark.dependency(name="test_game_dates_add_weekday_place")
@pytest.mark.parametrize('game_date, expected', [
    ('1 –∏—é–Ω—è, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–æ–π',
     '1 –∏—é–Ω—è (–ß–¢), 19:00 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¶–∏–Ω—å (16-—è –ª–∏–Ω. B.O., 83)'),
    ('7 –∏—é–ª—è, 19:30 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–π',
     '7 –∏—é–ª—è (–ü–¢), 19:30 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Parkking (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ø–∞—Ä–∫, 4)'),
    ('22 –∞–≤–≥—É—Å—Ç–∞, 12:13 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–æ–π',
     '22 –∞–≤–≥—É—Å—Ç–∞ (–í–¢), 12:13 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Unity –Ω–∞ –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–æ–π '
     '(–Ω–∞–±. –ö–∞—Ä–ø–æ–≤–∫–∏, 5–∫17)'),
    ('11 —Å–µ–Ω—Ç—è–±—Ä—è, 00:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ü–ª–æ—â–∞–¥–∏ –õ–µ–Ω–∏–Ω–∞',
     '11 —Å–µ–Ω—Ç—è–±—Ä—è (–ü–ù), 00:00 ‚Äî –¶–µ–Ω—Ç—Ä Kod (—É–ª. –ö–æ–º—Å–æ–º–æ–ª–∞, 2)'),
    ('18 –æ–∫—Ç—è–±—Ä—è, 23:59 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –°–µ–Ω–Ω–æ–π',
     '18 –æ–∫—Ç—è–±—Ä—è (–°–†), 23:59 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Unity –Ω–∞ –°–µ–Ω–Ω–æ–π (–ø–µ—Ä. –ì—Ä–∏–≤—Ü–æ–≤–∞, 4)'),
    ('25 –Ω–æ—è–±—Ä—è, 11:11 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–æ–π',
     '25 –Ω–æ—è–±—Ä—è (–°–ë), 11:11 ‚Äî –î–≤–æ—Ä–µ—Ü –û–ª–∏–º–ø–∏—è (–õ–∏—Ç–µ–π–Ω—ã–π –ø—Ä., 14)'),
    ('31 –¥–µ–∫–∞–±—Ä—è, 23:59 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –Ω–∏–≥–¥–µ',
     '31 –¥–µ–∫–∞–±—Ä—è (–í–°), 23:59 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –Ω–∏–≥–¥–µ')])
def test_game_dates_add_weekday_place(game_date, expected):
    """Test _game_dates_add_weekday_place func from app_vk."""
    assert _game_dates_add_weekday_place([game_date]) == [expected], (
        'In tested func datetime.datetime.now() is used! '
        'Due to this - if error caused by abbreviation for the day of the '
        'week - correct data according calendar in expected value or change '
        'date in game_date.')


@pytest.mark.dependency(name="test_get_post_image_url")
@pytest.mark.parametrize('block, group_name, post, expected_url', [
    # Correct case: photo
    ('photo',
     'Alibi',
     {'attachments': [{'photo': {'sizes': [0, 1, 2, 3, {
        'url': 'http://url_1/'}]}}]},
     'http://url_1/'),
    # Correct case: album
    ('album',
     'Alibi',
     {'attachments': [{'album': {'thumb': {'sizes': [0, 1, 2, 3, {
         'url': 'http://url_2/'}]}}}]},
     'http://url_2/'),
    # Incorrect case: AttributeError (Alibi default photo used)
    # post_image_url = '' - because 'block' has unexpected value
    ('unexpected_value',
     'Alibi',
     {'attachments': [{'album': {'thumb': {'sizes': [0, 1, 2, {
         'url': 'http://url_1/'}]}}}]},
     'https://sun9-46.userapi.com/impg/LiT08C2tWC-QeeYRDjHqaHRFyXNOYyhxFacXQA/'
     'JpfUXhL2n2s.jpg?size=674x781&quality=95&sign='
     'e8310f98da4ff095adb5e46ba20eef2d&type=album'),
    # Incorrect case: ValueError (Detectit default photo used)
    # post_image_url = '' - because URL doesn't start with "http"
    ('unexpected_value',
     'Detectit',
     {'attachments': [
         {'album': {'thumb': {'sizes': [0, 1, 2, {'url': 'not_http'}]}}}]},
     'https://sun9-40.userapi.com/impg/frYTaWRpxfjOS8eVZayKsugTQILb9MM0uYggNQ/'
     'UhQlYUWdBh0.jpg?size=800x768&quality=95&sign='
     'bb10ce9b1e4f2328a2382faba0981c2c&type=album')])
def test_get_post_image_url(block, group_name, post, expected_url):
    """Test _get_post_image_url func from app_vk."""
    assert _get_post_image_url(
        block=block, group_name=group_name, post=post) == expected_url


MESSAGE_GET_VK_CHAT_UPDATE: dict = {'items': [{'id': 2}]}


@pytest.mark.parametrize('last_message_id, expected', [
    (1, MESSAGE_GET_VK_CHAT_UPDATE),
    (2, None)])
def test_get_vk_chat_update(last_message_id, expected, mocker):
    """Test _get_vk_chat_update func from app_vk."""
    vk_bot_mock = mocker.Mock()
    vk_bot_mock.messages.getHistory.return_value = MESSAGE_GET_VK_CHAT_UPDATE
    assert _get_vk_chat_update(
        last_message_id=last_message_id,
        vk_bot=vk_bot_mock,
        vk_group_id=0) == expected


POSTS_GET_VK_WALL_UPDATE: dict[str, list] = {'items': [{'id': 3}, {'id': 2}]}


@pytest.mark.parametrize('last_wall_id, expected', [
    (1, POSTS_GET_VK_WALL_UPDATE['items'][1]),
    (2, POSTS_GET_VK_WALL_UPDATE['items'][0]),
    (3, None)])
def test_get_vk_wall_update(last_wall_id, expected, mocker):
    """Test _get_vk_wall_update func from app_vk."""
    vk_bot_mock = mocker.Mock()
    vk_bot_mock.wall.get.return_value = POSTS_GET_VK_WALL_UPDATE
    assert _get_vk_wall_update(
        last_wall_id=last_wall_id,
        vk_bot=vk_bot_mock,
        vk_group_id=0) == expected


@pytest.mark.parametrize('group_name, expected', [
    ('Alibi', 'https://vk.com/alibigames?w=wall-40914100_0'),
    ('Detectit', 'https://vk.com/detectitspb?w=wall-219311078_0')
])
def test_make_link_to_post(group_name, expected):
    """Test make_link_to_post func from app_vk."""
    assert make_link_to_post(group_name=group_name, post_id=0) == expected


MESSAGE_NO_LOOKUP: str = '–ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
MESSAGE_GAME_REMINDER_LOOKUP: str = (
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–µ—Ç–µ–∫—Ç–∏–≤!\n\n'

    '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞, 27 –∞–ø—Ä–µ–ª—è, –ø—Ä–æ–π–¥—ë—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥–¥–µ-–Ω–∏–±—É–¥—å.\n'
    '–°–±–æ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 19:00, –≤ 19:30 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞.')
MESSAGE_TEAM_REGISTER_LOOKUP: str = (
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–µ—Ç–µ–∫—Ç–∏–≤!\n\n'

    f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã ¬´{TEAM_NAME}¬ª –≤ —Å–æ—Å—Ç–∞–≤–µ 4 –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '
    '17 –º–∞—è, 19:30 –≥–¥–µ-–Ω–∏–±—É–¥—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
    '–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å, –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. '
    '–ï—Å–ª–∏ –≤—ã –æ—Ç–º–µ–Ω—è–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –º–µ–Ω–µ–µ, —á–µ–º –∑–∞ —Å—É—Ç–∫–∏, –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è. '
    '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 123 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞.\n\n'

    '–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –Ω–æ–º–µ—Ä: 8-888-888-88-8.\n'
    '–ö–∞–∫–æ–π-–Ω–∏–±—É–¥—å –±–∞–Ω–∫, –Ω–∞ –∏–º—è –ò–º—è –§.\n'
    '‚ùó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∏—á–µ–≥–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n'

    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω/–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ :)')
PARSED_MESSAGE_GAME_REMINDER: str = (
    '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞, 27 –∞–ø—Ä–µ–ª—è, –ø—Ä–æ–π–¥—ë—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥–¥–µ-–Ω–∏–±—É–¥—å.\n\n'

    '–°–±–æ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 19:00, –≤ 19:30 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞.')
PARSED_MESSAGE_TEAM_REGISTER: str = (
    f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã ¬´{TEAM_NAME}¬ª –≤ —Å–æ—Å—Ç–∞–≤–µ 4 –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '
    '17 –º–∞—è, 19:30 –≥–¥–µ-–Ω–∏–±—É–¥—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n'

    '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ '
    f'–∏–≥—Ä–µ. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–æ–º–µ—Ä—É {TEAM_CAPITAN_PROP}'
    ' –≤ —Ä–∞–∑–º–µ—Ä–µ 123 —Ä—É–±–ª–µ–π.\n\n'

    '–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—è–µ—Ç —É—á–∞—Å—Ç–∏–µ –º–µ–Ω–µ–µ, —á–µ–º –∑–∞ —Å—É—Ç–∫–∏, –æ–ø–ª–∞—Ç–∞ –Ω–µ '
    '–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.\n\n'

    '–ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–∞–≤–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏, –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ '
    '–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ —Ü–µ–Ω–µ:\n'
    '¬∑ 500 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –¥–æ –¥–Ω—è –∏–≥—Ä—ã,\n'
    '¬∑ 600 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –≤ –¥–µ–Ω—å –∏–≥—Ä—ã.')


@pytest.mark.dependency(depends=["test_split_paragraphs"])
@pytest.mark.parametrize('group_name, message, parsed_message', [
    ('Alibi', MESSAGE_NO_LOOKUP, None),
    ('Alibi', MESSAGE_GAME_REMINDER_LOOKUP,
     f"üü£ Alibi{NL*2}{PARSED_MESSAGE_GAME_REMINDER}"),
    ('Alibi', MESSAGE_TEAM_REGISTER_LOOKUP,
     f"üü£ Alibi{NL*2}{PARSED_MESSAGE_TEAM_REGISTER}"),
    ('Detectit', MESSAGE_NO_LOOKUP, None),
    ('Detectit', MESSAGE_GAME_REMINDER_LOOKUP,
     f"‚ö´Ô∏è Detectit{NL*2}{PARSED_MESSAGE_GAME_REMINDER}"),
    ('Detectit', MESSAGE_TEAM_REGISTER_LOOKUP,
     f"‚ö´Ô∏è Detectit{NL*2}{PARSED_MESSAGE_TEAM_REGISTER}")])
def test_parse_message(group_name, message, parsed_message):
    """Test parse_message func from app_vk."""
    assert parse_message(
        group_name=group_name,
        message={'items': [{'text': message}]}) == parsed_message


A_RATING_EXP: list[str] = [
    'üü£ Alibi',
    '–î–µ—Ç–µ–∫—Ç–∏–≤—ã, —Å–∞–º–∞—è –ø–µ—Ä–≤–∞—è —Å–µ—Ä–∏—è –∏–≥—Ä Alibi –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å '
    '—Å –Ω–∞–º–∏. –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ—Ö, –∫—Ç–æ —Å –Ω–∞–º–∏ –¥–∞–≤–Ω–æ, –∏ —Ç–µ—Ö, –∫—Ç–æ –≤–ø–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä—ã–ª —Å '
    '–Ω–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.',
    '–ò –ø—É–±–ª–∏–∫—É–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥ –∑–∞ –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –¥–Ω–∏. '
    '–ò—â–∏—Ç–µ —Å–µ–±—è –∏ –≥–æ—Ä–¥–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ ‚Äî –∫–∞–∫–∏–º–∏ –±—ã –æ–Ω–∏ –Ω–∏ –±—ã–ª–∏ üòå',
    'https://vk.com/alibigames?w=wall-40914100_13243']
A_TASKS_EXP: list[str] = [
    'üü£ Alibi',
    '–î–µ—Ç–µ–∫—Ç–∏–≤—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—à—É —Ä—É–±—Ä–∏–∫—É #alibitasks –∏ —É –Ω–∞—Å –¥–ª—è –≤–∞—Å –Ω–æ–≤–æ–µ '
    '–∑–∞–¥–∞–Ω–∏–µ. ',
    '–í–∞—à–∞ –∑–∞–¥–∞—á–∞: —É–≥–∞–¥–∞—Ç—å —Ñ–∏–ª—å–º –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É ',
    '–ø–æ—Å—Ç–µ—Ä—É. ',
    '–ñ–¥–µ–º –≤–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! ',
    'https://vk.com/alibigames?w=wall-40914100_13380']
D_PHOTOS_EXP: list[str] = [
    '‚ö´Ô∏è Detectit',
    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∫ –Ω–∞—à–µ–π –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å–∞–º—ã–º–∏ —è—Ä–∫–∏–º–∏. '
    '–í–µ–¥—å –≥–ª–∞–≤–Ω—ã–º–∏ –≥–µ—Ä–æ—è–º–∏ —è–≤–ª—è–µ—Ç–µ—Å—å –≤—ã!',
    '–§–æ—Ç–æ–∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–µ–ª–∞ –°—é–∑–µ–Ω –ë–ª–∞–Ω—Ç 23 –º–∞—è –≤ –ü–∞—Ä–∫–∫–∏–Ω–≥–µ –≤ '
    '–∞–ª—å–±–æ–º–∞—Ö –≥—Ä—É–ø–ø—ãüòâ',
    'https://vk.com/detectitspb?w=wall-219311078_391']


@pytest.mark.dependency(name="test_parse_post_add_link")
@pytest.mark.dependency(depends=["test_split_paragraphs"])
@pytest.mark.parametrize('group_name, post, expected', [
    ('Alibi', A_EXAMPLE_RATING, A_RATING_EXP),
    ('Alibi', A_EXAMPLE_TASKS, A_TASKS_EXP),
    ('Detectit', D_EXAMPLE_PHOTOS, D_PHOTOS_EXP)])
def test_parse_post_add_link(group_name, post, expected):
    """Test _parse_post_add_link func from app_vk."""
    assert _parse_post_add_link(
        group_name=group_name,
        post_id=post['id'],
        splitted_text=_split_paragraphs(
            group_name=group_name,
            text=post['text'])) == expected


A_CHECKIN_EXP: list[str] = [
    'üü£ Alibi',
    '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. India ',
    '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: ',
    'https://vk.com/app5619682_-40914100 ',
    '–î–µ–π—Å—Ç–≤—É–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞ –≤—Å—é –∫–æ–º–∞–Ω–¥—É! –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤ –Ω–µ–º '
    '—É—á–∞—Å—Ç–∏–µ, –Ω—É–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏:',
    'https://vk.com/alibigames?w=wall-40914100_13233',
    '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ –Ω–æ—á—å —Å 26 –Ω–∞ 27 –º–∞—Ä—Ç–∞.']


@pytest.mark.dependency(name="test_parse_post_checkin")
@pytest.mark.dependency(depends=["test_split_paragraphs"])
@pytest.mark.parametrize('group_name, post, expected', [
    ('Alibi', A_EXAMPLE_CHECKIN, A_CHECKIN_EXP),])
def test_parse_post_checkin(group_name, post, expected):
    """Test _parse_post_checkin func from app_vk."""
    assert _parse_post_checkin(
        group_name=group_name,
        post_id=post['id'],
        splitted_text=_split_paragraphs(
            group_name=group_name,
            text=post['text'])) == expected


@pytest.mark.dependency(name="test_parse_post_game_results")
@pytest.mark.dependency(depends=["test_split_paragraphs"])
@pytest.mark.parametrize('team_name, expected_medals', [
    ('–†–µ—á–µ–≤—ã–µ –∞—É—Ç–∏—Å—Ç—ã', '#medal #wood_medal'),
    ('–ë–æ—Å—Å –º–æ–ª–æ–∫–æ—Å–æ—Å –∏ –∫–æ–º–ø–∞–Ω–∏—è', '#medal #iron_medal'),
    ('–ö–æ—Ç–∏–∫–∏ –ö–∏–∞–Ω—É –†–∏–≤–∑–∞', '#medal #bronze_medal'),
    ('–ú—ã —Ç–∞–∫ –∏ –¥—É–º–∞–ª–∏', '#medal #silver_medal'),
    ('–í–∏–Ω—Ç–∞–∂–Ω—ã–π –≥–∞–∑–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä', '#medal #gold_medal')])
def test_parse_post_game_results(team_name, expected_medals):
    """Test _parse_post_game_results func from app_vk."""
    assert _parse_post_game_results(
        splitted_text=_split_paragraphs(
            group_name='Alibi',
            text=A_EXAMPLE_GAME_RESULTS['text']),
        team_name=team_name) == [
            'üü£ Alibi',
            '–ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –Ω–æ–≤—ã–µ –∏–≥—Ä—ã! –í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ '
            '–Ω–∞ –ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–π –º—ã —Å –≤–∞–º–∏ –Ω–∞—á–∞–ª–∏ —Å–µ—Ä–∏—é India. –ò —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤—ã '
            '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–≤–æ–π –∏–≥—Ä—ã.',
            '‚ñ™5 –º–µ—Å—Ç–æ: ¬´–†–µ—á–µ–≤—ã–µ –∞—É—Ç–∏—Å—Ç—ã¬ª',
            '–ù—É, –±–ª–∞–≥–æ —Ä–µ—á—å –Ω–∞ –∏–≥—Ä–µ –Ω—É–∂–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å ‚Äî –≤—Å–µ '
            '–æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –ø–∏—Å—å–º–µ–Ω–Ω–æ–º –≤–∏–¥–µ. –ò —Å —ç—Ç–∏–º –∫–æ–º–∞–Ω–¥–∞ '
            '—Å–ø—Ä–∞–≤–∏–ª–∞—Å—å –æ—Ç–ª–∏—á–Ω–æ üéâ',
            '‚ñ™4 –º–µ—Å—Ç–æ: ¬´–ë–æ—Å—Å –º–æ–ª–æ–∫–æ—Å–æ—Å –∏ –∫–æ–º–ø–∞–Ω–∏—è¬ª',
            '–û—Ö —É–∂ —ç—Ç–æ—Ç –ø—è—Ç—ã–π —Ç—É—Ä‚Ä¶ –ù–æ –Ω–∞—à –æ–ø—ã—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: —Ç–µ, –∫—Ç–æ '
            '—É–≤–µ—Ä–µ–Ω–Ω–æ –¥–µ—Ä–∂–∞–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–π –∏–≥—Ä—ã, –Ω–µ –æ—Å–æ–±–µ–Ω–Ω–æ '
            '–ø–æ—Å—Ç—Ä–∞–¥–∞—é—Ç –æ—Ç –Ω–µ—É–¥–∞—á–∏ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ. –¢–∞–∫ –∏ –≤—ã—à–ª–æ üéä',
            '‚ñ™3 –º–µ—Å—Ç–æ: ¬´–ö–æ—Ç–∏–∫–∏ –ö–∏–∞–Ω—É –†–∏–≤–∑–∞¬ª',
            '–í—Å–µ–º –∫–æ—Ç–∏–∫–∞–º ‚Äî –ø–æ –º–µ–¥–∞–ª–∏. –ë—Ä–æ–Ω–∑–æ–≤–æ–π! üê±',
            '‚ñ™2 –º–µ—Å—Ç–æ: ¬´–ú—ã —Ç–∞–∫ –∏ –¥—É–º–∞–ª–∏¬ª',
            '–î—É–º–∞—Ç—å ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ. –•–æ—Ä–æ—à–æ –¥—É–º–∞—Ç—å ‚Äî –µ—â—ë –ª—É—á—à–µ. –û—Ç —ç—Ç–æ–≥–æ '
            '–±—ã–≤–∞—é—Ç –ø–µ—Ä–≤—ã–µ –º–µ—Å—Ç–∞, –Ω–∞–≥—Ä–∞–¥—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏—è—Ç–Ω—ã–µ —à—Ç—É–∫–∏ üòâ',
            '‚ñ™1 –º–µ—Å—Ç–æ: ¬´–í–∏–Ω—Ç–∞–∂–Ω—ã–π –≥–∞–∑–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä¬ª',
            '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –º—ã—Å–ª–∏ –∏ '
            '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ü•Ç',
            expected_medals]


A_OTHER_EXP: list[str] = [
    'üü£ Alibi',
    '–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —É–∂–µ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Ä–∏–∏ –∏–≥—Ä.']


@pytest.mark.dependency(name="test_parse_post_other")
@pytest.mark.dependency(depends=["test_split_paragraphs"])
@pytest.mark.parametrize('group_name, post_text, expected', [
    ('Alibi', A_EXAMPLE_OTHER['text'], A_OTHER_EXP),])
def test_parse_post_other(group_name, post_text, expected):
    """Test _parse_post_other func from app_vk."""
    assert _parse_post_other(
        splitted_text=_split_paragraphs(
            group_name=group_name,
            text=post_text)) == expected


A_PREVIEW_DATES_EXP: list[str] = [
    '27 –º–∞—Ä—Ç–∞ (–°–†), 19:00 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Parkking (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ø–∞—Ä–∫, 4)',
    '28 –º–∞—Ä—Ç–∞ (–ß–¢), 19:00 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Parkking (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ø–∞—Ä–∫, 4)',
    '30 –º–∞—Ä—Ç–∞ (–°–ë), 19:00 ‚Äî –î–≤–æ—Ä–µ—Ü –û–ª–∏–º–ø–∏—è (–õ–∏—Ç–µ–π–Ω—ã–π –ø—Ä., 14)',
    '2 –∞–ø—Ä–µ–ª—è (–í–¢), 19:00 ‚Äî –î–≤–æ—Ä–µ—Ü –û–ª–∏–º–ø–∏—è (–õ–∏—Ç–µ–π–Ω—ã–π –ø—Ä., 14)',
    '3 –∞–ø—Ä–µ–ª—è (–°–†), 19:00 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Parkking (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ø–∞—Ä–∫, 4)']
A_PREVIEW_TEXT_EXP: list[str] = [
    'üü£ Alibi',
    '–ê–Ω–æ–Ω—Å. India ',
    '–ò–Ω–¥–∏—è, 2006 –≥–æ–¥. ',
    '–ú–µ–∂–¥—É —Å–µ–∑–æ–Ω–∞–º–∏ –º–æ–Ω—Å—É–Ω–æ–≤, –∑–∞—Ç—è–∂–Ω—ã—Ö –¥–æ–∂–¥–µ–π, –≤–æ–ª–Ω–∞ –∂–µ—Å—Ç–æ–∫–∏—Ö, –∫—Ä–æ–≤–∞–≤—ã—Ö '
    '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∑–∞—Ö–ª–µ—Å—Ç–Ω—É–ª–∞ —Å–µ–≤–µ—Ä –ò–Ω–¥–∏–∏. –ú–∞—Å—Å–æ–≤—ã–µ —É–±–∏–π—Å—Ç–≤–∞ –º–µ—Å—Ç–Ω—ã—Ö –∏ '
    '—Ç—É—Ä–∏—Å—Ç–æ–≤ –¥–µ—Ä–∂–∞–ª–∏ –ª—é–¥–µ–π –≤ —É–∂–∞—Å–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤. '
    '–ü–∞—Ä–∞ —Ñ—Ä–∞–Ω—Ü—É–∑–æ–≤, —Ç—É—Ä–∏—Å—Ç –∏–∑ –ë—Ä–∞–∑–∏–ª–∏–∏, –∞ –∂–µ—Ä—Ç–≤—ã —Å—Ä–µ–¥–∏ –º–µ—Å—Ç–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è '
    '–∏ –≤–æ–≤—Å–µ –∏—Å—á–∏—Å–ª—è–ª–∏—Å—å –¥–µ—Å—è—Ç–∫–∞–º–∏... ',
    '–í—Å–µ –≤ –ø–æ—Ä–µ–∑–∞—Ö. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ ‚Äî –±–µ–∑ –≥–ª–∞–∑. –ò —Å –∫—É–ª–æ–Ω–∞–º–∏ –≤ —Ñ–æ—Ä–º–µ '
    '–ø–æ–ª—É–º–µ—Å—è—Ü–∞ –Ω–∞ —à–µ–µ. –ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ? –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è',
    '–°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 22 –º–∞—Ä—Ç–∞ –≤ 18:05. ']
D_PREVIEW_DATES_EXP: list[str] = [
    '29 –º–∞—è (–ü–ù), 19:30, —Ä–µ—Å—Ç–æ—Ä–∞–Ω Parkking (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ø–∞—Ä–∫, 4)',
    '30 –º–∞—è (–í–¢), 19:30, —Ä–µ—Å—Ç–æ—Ä–∞–Ω Parkking (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ø–∞—Ä–∫, 4)',
    '31 –º–∞—è (–°–†), 19:30, —Ä–µ—Å—Ç–æ—Ä–∞–Ω Unity –Ω–∞ –°–µ–Ω–Ω–æ–π (–ø–µ—Ä. –ì—Ä–∏–≤—Ü–æ–≤–∞, 4). ',]
D_PREVIEW_TEXT_EXP: list[str] = [
    '‚ö´Ô∏è Detectit',
    'üñá–ê–Ω–æ–Ω—Å. Coltüñá ',
    '–ê–º–µ—Ä–∏–∫–∞ –¥–≤–∞–¥—Ü–∞—Ç—ã—Ö —Ä–∞—Å—Ü–≤–µ–ª–∞ –º—É–∑—ã–∫–æ–π –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π, —Ç–µ–∞—Ç—Ä–æ–º –∏ '
    '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–æ–º. –ö–∏–ø–µ–ª–∞ –∂–∏–∑–Ω—å, –ø–æ–¥ –∑–≤—É–∫–∏ –¥–∂–∞–∑–∞ —Ä—É—à–∏–ª–∏—Å—å –ø—Ä–æ—à–ª—ã–µ ',
    '—É—Å—Ç–æ–∏...',
    '...13 –∏—é–Ω—è 1925 –æ–∫–æ–ª–æ –ø–æ–ª—É–Ω–æ—á–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –≤ –ø–∞—Ä–∫–µ '
    '–¥–≤–∞ —Ç—Ä—É–ø–∞. –°—É–µ—Ç–ª–∏–≤—ã–π –ù—å—é-–ô–æ—Ä–∫ –Ω–µ –∑–∞–º–µ—Ç–∏–ª –±—ã –¥–≤—É—Ö –∂–µ—Ä—Ç–≤ ',
    '–∫–æ–ª—å—Ç–∞ 45 –∫–∞–ª–∏–±—Ä–∞. –ù–æ –≤ —Ä–µ–¥–∞–∫—Ü–∏–∏ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –≥–∞–∑–µ—Ç —Å—Ç–∞–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å '
    '–ø—É–≥–∞—é—â–∏–µ –ø–∏—Å—å–º–∞...',
    '–°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 25 –º–∞—è –≤ 12:05. ']


@pytest.mark.dependency(name="test_parse_post_preview")
@pytest.mark.dependency(depends=[
    "test_game_dates_add_weekday_place",
    "test_split_paragraphs"])
@pytest.mark.parametrize('group_name, post_text, expected', [
    ('Alibi', A_EXAMPLE_PREVIEW['text'],
     (A_PREVIEW_DATES_EXP, A_PREVIEW_TEXT_EXP)),
    ('Detectit', D_EXAMPLE_PREVIEW['text'],
     (D_PREVIEW_DATES_EXP, D_PREVIEW_TEXT_EXP))])
def test_parse_post_preview(group_name, post_text, expected):
    """Test _parse_post_preview func from app_vk."""
    assert _parse_post_preview(
        group_name=group_name,
        post_text=post_text,
        splitted_text=_split_paragraphs(
            group_name=group_name,
            text=post_text)) == expected


A_PRIZE_RESULTS_EXP: list[str] = [
    'üü£ Alibi',
    '‚ñ™–ò—Ç–æ–≥–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞‚ñ™',
    '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –≤ –Ω–æ—á—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –∏–≥—Ä–æ–π —Å–µ—Ä–∏–∏. '
    '–ö—Ç–æ –∂–µ —Å—Ç–∞–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å–µ–≥–æ–¥–Ω—è? –ü–µ—Ä–µ–π–¥—ë–º –∂–µ —Å–∫–æ—Ä–µ–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.',
    '–°–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è...',
    '[id118725724|–í–∞—Ä—è –•–∞–ª–∏–ª–æ–≤–∞] üïµ\u200d‚ôÇ',
    '–ú—ã –≤–∞—Å –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ '
    '—Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã! –£—á–∞—Å—Ç–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –í–∞—Ä–∏ –±—É–¥–µ—Ç '
    '–±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –≤ —ç—Ç–æ–π —Å–µ—Ä–∏–∏ –∏–≥—Ä.']
D_PRIZE_RESULTS_EXP: list[str] = [
    '‚ö´Ô∏è Detectit',
    '‚ñ™–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞‚ñ™ ',
    '–ù–∞—à–∞ —Ç—Ä–∞–¥–∏—Ü–∏—è - —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.',
    '–ì–æ—Ç–æ–≤—ã? –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è [id661684853|–ö–æ–ª—è –§–æ–º–∏–Ω]. ',
    '–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –¥–µ–ª–µ "1998"!',
    '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –∂–¥—ë–º –≤–∞—Å –≤ –ª–∏—á–∫–µ –≥—Ä—É–ø–ø—ã: —Ç–∞–º —Ä–∞—Å—Å–∫–∞–∂–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å '
    '–≤—ã–∏–≥—Ä—ã—à–µ–º!']


@pytest.mark.dependency(name="test_parse_post_prize_results")
@pytest.mark.dependency(depends=["test_split_paragraphs"])
@pytest.mark.parametrize('group_name, post_text, expected', [
    ('Alibi', A_EXAMPLE_PRIZE_RESULTS['text'], A_PRIZE_RESULTS_EXP),
    ('Detectit', D_EXAMPLE_PRIZE_RESULTS['text'], D_PRIZE_RESULTS_EXP)])
def test_parse_post_prize_results(group_name, post_text, expected):
    """Test _parse_post_prize_results func from app_vk."""
    assert _parse_post_prize_results(
        splitted_text=_split_paragraphs(
            group_name=group_name,
            text=post_text)) == expected


D_STOP_LIST_EXP: list[str] = [
    '‚ö´Ô∏è Detectit',
    f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{TEAM_NAME}' –¥–æ–ø—É—â–µ–Ω–∞ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–∏—é –∏–≥—Ä!"]


@pytest.mark.dependency(name="test_parse_post_stop_list")
@pytest.mark.dependency(depends=["test_split_paragraphs"])
def test_parse_post_stop_list():
    """Test _parse_post_stop_list func from app_vk."""
    assert _parse_post_stop_list(
        post=D_EXAMPLE_STOP_LIST,
        splitted_text=_split_paragraphs(
            group_name='Detectit',
            text=D_EXAMPLE_STOP_LIST['text'])) == D_STOP_LIST_EXP


A_TEAMS_EXP: list[str] = ['üü£ Alibi', 'üñá–°–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥üñá ']
D_TEAMS_EXP: list[str] = ['‚ö´Ô∏è Detectit', 'üñá–°–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥üñá ']


@pytest.mark.dependency(name="test_parse_post_teams")
@pytest.mark.dependency(depends=["test_split_paragraphs"])
@pytest.mark.parametrize('group_name, post_text, expected', [
    ('Alibi', A_EXAMPLE_TEAMS['text'], A_TEAMS_EXP),
    ('Detectit', D_EXAMPLE_TEAMS['text'], D_TEAMS_EXP)])
def test_parse_post_teams(group_name, post_text, expected):
    """Test _parse_post_teams func from app_vk."""
    assert _parse_post_teams(
        splitted_text=_split_paragraphs(
            group_name=group_name,
            text=post_text)) == expected


# For some reason tests with both @pytest.mark.dependency and
# @pytest.mark.parametrize cause tests to be skipped
@pytest.mark.dependency(depends=[
    "test_define_post_topic",
    "test_get_post_image_url",
    # "test_parse_post_add_link",
    # "test_parse_post_checkin",
    # "test_parse_post_game_results",
    # "test_parse_post_other",
    # "test_parse_post_preview",
    # "test_parse_post_prize_results",
    # "test_parse_post_stop_list",
    # "test_parse_post_teams"
    ])
@pytest.mark.parametrize('group_name, post, expected', [
    ('Alibi', A_EXAMPLE_CHECKIN, {
        'post_id': A_EXAMPLE_CHECKIN['id'],
        'post_image_url': _get_post_image_url(
            block='photo',
            group_name='Alibi',
            post=A_EXAMPLE_CHECKIN),
        'post_text': A_CHECKIN_EXP,
        'game_dates': None}),
    # –£–∫–∞–∑–∞–Ω–Ω–∞—è –≤ .env –∫–æ–º–∞–Ω–¥–∞ (team_name) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.
    ('Alibi', A_EXAMPLE_GAME_RESULTS, None),
    ('Alibi', A_EXAMPLE_OTHER, {
        'post_id': A_EXAMPLE_OTHER['id'],
        'post_image_url': _get_post_image_url(
            block='video',
            group_name='Alibi',
            post=A_EXAMPLE_OTHER),
        'post_text': A_OTHER_EXP + [
            '–ó–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫:\n'
            + make_link_to_post(
                group_name='Alibi', post_id=A_EXAMPLE_OTHER['id'])],
        'game_dates': None}),
    ('Alibi', A_EXAMPLE_PRIZE_RESULTS, {
        'post_id': A_EXAMPLE_PRIZE_RESULTS['id'],
        'post_image_url': _get_post_image_url(
            block='video',
            group_name='Alibi',
            post=A_EXAMPLE_PRIZE_RESULTS),
        'post_text': A_PRIZE_RESULTS_EXP + [
            '–ó–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫:\n'
            + make_link_to_post(
                group_name='Alibi', post_id=A_EXAMPLE_PRIZE_RESULTS['id'])],
        'game_dates': None}),
    ('Alibi', A_EXAMPLE_PREVIEW, {
        'post_id': A_EXAMPLE_PREVIEW['id'],
        'post_image_url': _get_post_image_url(
            block='photo',
            group_name='Alibi',
            post=A_EXAMPLE_PREVIEW),
        'post_text': A_PREVIEW_TEXT_EXP,
        'game_dates': A_PREVIEW_DATES_EXP}),
    ('Alibi', A_EXAMPLE_RATING, {
        'post_id': A_EXAMPLE_RATING['id'],
        'post_image_url': _get_post_image_url(
            block='photo',
            group_name='Alibi',
            post=A_EXAMPLE_RATING),
        'post_text': A_RATING_EXP,
        'game_dates': None}),
    ('Alibi', A_EXAMPLE_TASKS, {
        'post_id': A_EXAMPLE_TASKS['id'],
        'post_image_url': _get_post_image_url(
            block='photo',
            group_name='Alibi',
            post=A_EXAMPLE_TASKS),
        'post_text': A_TASKS_EXP,
        'game_dates': None}),
    # The team TEAM_NAME is not in the top five
    ('Detectit', D_EXAMPLE_GAME_RESULTS, None),
    ('Detectit', D_EXAMPLE_PHOTOS, {
        'post_id': D_EXAMPLE_PHOTOS['id'],
        'post_image_url': _get_post_image_url(
            block='album',
            group_name='Detectit',
            post=D_EXAMPLE_PHOTOS),
        'post_text': D_PHOTOS_EXP,
        'game_dates': None}),
    ('Detectit', D_EXAMPLE_PREVIEW, {
        'post_id': D_EXAMPLE_PREVIEW['id'],
        'post_image_url': _get_post_image_url(
            block='photo',
            group_name='Detectit',
            post=D_EXAMPLE_PREVIEW),
        'post_text': D_PREVIEW_TEXT_EXP,
        'game_dates': D_PREVIEW_DATES_EXP}),
    ('Detectit', D_EXAMPLE_PRIZE_RESULTS, {
        'post_id': D_EXAMPLE_PRIZE_RESULTS['id'],
        'post_image_url': _get_post_image_url(
            block='video',
            group_name='Detectit',
            post=D_EXAMPLE_PRIZE_RESULTS),
        'post_text': D_PRIZE_RESULTS_EXP + [
            '–ó–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫:\n'
            + make_link_to_post(
                group_name='Detectit', post_id=D_EXAMPLE_PRIZE_RESULTS['id'])],
        'game_dates': None}),
    ('Detectit', D_EXAMPLE_STOP_LIST, {
        'post_id': D_EXAMPLE_STOP_LIST['id'],
        'post_image_url': _get_post_image_url(
            block='photo',
            group_name='Detectit',
            post=D_EXAMPLE_STOP_LIST),
        'post_text': D_STOP_LIST_EXP,
        'game_dates': None}),
    ('Detectit', D_EXAMPLE_TEAMS, {
        'post_id': D_EXAMPLE_TEAMS['id'],
        'post_image_url': _get_post_image_url(
            block='photo',
            group_name='Detectit',
            post=D_EXAMPLE_TEAMS),
        'post_text': D_TEAMS_EXP,
        'game_dates': None})])
def test_parse_post(group_name, post, expected):
    """Test parse_post func from app_vk."""
    assert parse_post(
        group_name=group_name,
        post=post,
        post_topic=define_post_topic(post=post)) == expected


"""
Skipped tests.
The tested functions call other functions that use the VkApi.method.
"""

SKIP_REASON_VK_API: str = (
    'Currently no way to test it: '
    'call other function that use the VkApi.method!')


@pytest.mark.skip(reason=SKIP_REASON_VK_API)
def test_init_vk_bot() -> None:
    """Test init_vk_bot func from app_vk."""
    pass


@pytest.mark.skip(reason=SKIP_REASON_VK_API)
def test_get_vk_chat_update_groups():
    """Test get_vk_chat_update_groups func from app_vk."""
    pass


@pytest.mark.skip(reason=SKIP_REASON_VK_API)
def test_get_vk_wall_update_groups():
    """Test get_vk_wall_update_groups func from app_vk."""
    pass
