import pytest
import sys
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

from project.app_vk import (
    define_post_topic, parse_message)

from project.data.app_data import TEAM_NAME, TEAM_CAPITAN_PROP

from vk_wall_examples import (
    A_EXAMPLE_CHECKIN, A_EXAMPLE_GAME_RESULTS, A_EXAMPLE_OTHER,
    A_EXAMPLE_PHOTOS, A_EXAMPLE_PREVIEW, A_EXAMPLE_PRIZE_RESULTS,
    A_EXAMPLE_RATING, A_EXAMPLE_STOP_LIST, A_EXAMPLE_TASKS, A_EXAMPLE_TEAMS,

    D_EXAMPLE_CHECKIN, D_EXAMPLE_GAME_RESULTS, D_EXAMPLE_OTHER,
    D_EXAMPLE_PHOTOS, D_EXAMPLE_PREVIEW, D_EXAMPLE_PRIZE_RESULTS,
    D_EXAMPLE_RATING, D_EXAMPLE_STOP_LIST, D_EXAMPLE_TASKS, D_EXAMPLE_TEAMS)

NL = '\n'


@pytest.mark.parametrize('post_example, expected_topic', [
    (A_EXAMPLE_CHECKIN, 'checkin'),
    (A_EXAMPLE_GAME_RESULTS, 'game_results'),
    (A_EXAMPLE_OTHER, 'other'),
    # (A_EXAMPLE_PHOTOS, TypeError),
    (A_EXAMPLE_PREVIEW, 'preview'),
    (A_EXAMPLE_PRIZE_RESULTS, 'prize_results'),
    (A_EXAMPLE_RATING, 'rating'),
    # (A_EXAMPLE_STOP_LIST, TypeError),
    (A_EXAMPLE_TASKS, 'tasks'),
    (A_EXAMPLE_TEAMS, 'teams'),
    (D_EXAMPLE_CHECKIN, 'checkin'),
    (D_EXAMPLE_GAME_RESULTS, 'game_results'),
    # (D_EXAMPLE_OTHER, TypeError),
    (D_EXAMPLE_PHOTOS, 'photos'),
    (D_EXAMPLE_PREVIEW, 'preview'),
    (D_EXAMPLE_PRIZE_RESULTS, 'prize_results'),
    # (D_EXAMPLE_RATING, TypeError),
    (D_EXAMPLE_STOP_LIST, 'stop-list'),
    # (D_EXAMPLE_TASKS, TypeError),
    (D_EXAMPLE_TEAMS, 'teams'),
])
def test_define_post_topic(post_example, expected_topic) -> None:
    """Test define_post_topic func from app_vk."""
    assert define_post_topic(post_example) == expected_topic


@pytest.mark.skip(reason='Currently no way to test it: uses VkApi.method!')
def test_init_vk_bot() -> None:
    """Test init_vk_bot func from app_vk."""
    pass


@pytest.mark.skip(reason='Currently no way to test it: uses VkApi.method!')
def test_get_vk_chat_update_groups():
    pass


@pytest.mark.skip(reason='Currently no way to test it: uses VkApi.method!')
def test_get_vk_wall_update_groups():
    pass


MESSAGE_NO_LOOKUP: str = '–ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
MESSAGE_GAME_REMINDER_LOOKUP: str = (
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–µ—Ç–µ–∫—Ç–∏–≤!\n\n'

    '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞, 27 –∞–ø—Ä–µ–ª—è, –ø—Ä–æ–π–¥—ë—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥–¥–µ-–Ω–∏–±—É–¥—å.\n'
    '–°–±–æ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 19:00, –≤ 19:30 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞.')
MESSAGE_TEAM_REGISTER_LOOKUP: str = (
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–µ—Ç–µ–∫—Ç–∏–≤!\n\n'

    f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã ¬´{TEAM_NAME}¬ª –≤ —Å–æ—Å—Ç–∞–≤–µ 4 –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '
    '17 –º–∞—è, 19:30 –≥–¥–µ-–Ω–∏–±—É–¥—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
    '–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å, –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. '
    '–ï—Å–ª–∏ –≤—ã –æ—Ç–º–µ–Ω—è–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –º–µ–Ω–µ–µ, —á–µ–º –∑–∞ —Å—É—Ç–∫–∏, –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è. '
    '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 123 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞.\n\n'

    '–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –Ω–æ–º–µ—Ä: 8-888-888-88-8.\n'
    '–ö–∞–∫–æ–π-–Ω–∏–±—É–¥—å –±–∞–Ω–∫, –Ω–∞ –∏–º—è –ò–º—è –§.\n'
    '‚ùó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∏—á–µ–≥–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n'

    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω/–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ :)')
PARSED_MESSAGE_GAME_REMINDER: str = (
    '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞, 27 –∞–ø—Ä–µ–ª—è, –ø—Ä–æ–π–¥—ë—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥–¥–µ-–Ω–∏–±—É–¥—å.\n\n'

    '–°–±–æ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 19:00, –≤ 19:30 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞.')
PARSED_MESSAGE_TEAM_REGISTER: str = (
    f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã ¬´{TEAM_NAME}¬ª –≤ —Å–æ—Å—Ç–∞–≤–µ 4 –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '
    '17 –º–∞—è, 19:30 –≥–¥–µ-–Ω–∏–±—É–¥—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n'

    '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ '
    f'–∏–≥—Ä–µ. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–æ–º–µ—Ä—É {TEAM_CAPITAN_PROP}'
    ' –≤ —Ä–∞–∑–º–µ—Ä–µ 123 —Ä—É–±–ª–µ–π.\n\n'

    '–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—è–µ—Ç —É—á–∞—Å—Ç–∏–µ –º–µ–Ω–µ–µ, —á–µ–º –∑–∞ —Å—É—Ç–∫–∏, –æ–ø–ª–∞—Ç–∞ –Ω–µ '
    '–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.\n\n'

    '–ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–∞–≤–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏, –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ '
    '–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ —Ü–µ–Ω–µ:\n'
    '¬∑ 500 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –¥–æ –¥–Ω—è –∏–≥—Ä—ã,\n'
    '¬∑ 600 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –≤ –¥–µ–Ω—å –∏–≥—Ä—ã.')


@pytest.mark.parametrize('group_name, message, parsed_message', [
    ('Alibi', MESSAGE_NO_LOOKUP, None),
    ('Alibi', MESSAGE_GAME_REMINDER_LOOKUP,
     f"üü£ Alibi{NL*2}{PARSED_MESSAGE_GAME_REMINDER}"),
    ('Alibi', MESSAGE_TEAM_REGISTER_LOOKUP,
     f"üü£ Alibi{NL*2}{PARSED_MESSAGE_TEAM_REGISTER}"),
    ('Detectit', MESSAGE_NO_LOOKUP, None),
    ('Detectit', MESSAGE_GAME_REMINDER_LOOKUP,
     f"‚ö´Ô∏è Detectit{NL*2}{PARSED_MESSAGE_GAME_REMINDER}"),
    ('Detectit', MESSAGE_TEAM_REGISTER_LOOKUP,
     f"‚ö´Ô∏è Detectit{NL*2}{PARSED_MESSAGE_TEAM_REGISTER}")])
def test_parse_message(group_name, message, parsed_message):
    assert parse_message(
        group_name=group_name,
        message={'items': [{'text': message}]}) == parsed_message
