import pytest
import sys
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

from project.app_vk import (
    define_post_topic, parse_message, _game_dates_add_weekday_place,
    _get_post_image_url, _get_vk_chat_update, _get_vk_wall_update,
    _make_link_to_post, _parse_post_checkin, _parse_post_game_results,
    _split_abstracts)

from project.data.app_data import TEAM_NAME, TEAM_CAPITAN_PROP

from vk_wall_examples import (
    A_EXAMPLE_CHECKIN, A_EXAMPLE_GAME_RESULTS, A_EXAMPLE_OTHER,
    A_EXAMPLE_PHOTOS, A_EXAMPLE_PREVIEW, A_EXAMPLE_PRIZE_RESULTS,
    A_EXAMPLE_RATING, A_EXAMPLE_STOP_LIST, A_EXAMPLE_TASKS, A_EXAMPLE_TEAMS,

    D_EXAMPLE_CHECKIN, D_EXAMPLE_GAME_RESULTS, D_EXAMPLE_OTHER,
    D_EXAMPLE_PHOTOS, D_EXAMPLE_PREVIEW, D_EXAMPLE_PRIZE_RESULTS,
    D_EXAMPLE_RATING, D_EXAMPLE_STOP_LIST, D_EXAMPLE_TASKS, D_EXAMPLE_TEAMS)

NL: str = '\n'


@pytest.mark.parametrize('post_example, expected_topic', [
    (A_EXAMPLE_CHECKIN, 'checkin'),
    (A_EXAMPLE_GAME_RESULTS, 'game_results'),
    (A_EXAMPLE_OTHER, 'other'),
    # (A_EXAMPLE_PHOTOS, TypeError),
    (A_EXAMPLE_PREVIEW, 'preview'),
    (A_EXAMPLE_PRIZE_RESULTS, 'prize_results'),
    (A_EXAMPLE_RATING, 'rating'),
    # (A_EXAMPLE_STOP_LIST, TypeError),
    (A_EXAMPLE_TASKS, 'tasks'),
    (A_EXAMPLE_TEAMS, 'teams'),
    (D_EXAMPLE_CHECKIN, 'checkin'),
    (D_EXAMPLE_GAME_RESULTS, 'game_results'),
    # (D_EXAMPLE_OTHER, TypeError),
    (D_EXAMPLE_PHOTOS, 'photos'),
    (D_EXAMPLE_PREVIEW, 'preview'),
    (D_EXAMPLE_PRIZE_RESULTS, 'prize_results'),
    # (D_EXAMPLE_RATING, TypeError),
    (D_EXAMPLE_STOP_LIST, 'stop-list'),
    # (D_EXAMPLE_TASKS, TypeError),
    (D_EXAMPLE_TEAMS, 'teams')])
def test_define_post_topic(post_example, expected_topic) -> None:
    """Test define_post_topic func from app_vk."""
    assert define_post_topic(post_example) == expected_topic


@pytest.mark.parametrize('game_date, expected', [
    ('1 –∏—é–Ω—è, 19:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–æ–π',
     '1 –∏—é–Ω—è (–ß–¢), 19:00 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¶–∏–Ω—å (16-—è –ª–∏–Ω. B.O., 83)'),
    ('7 –∏—é–ª—è, 19:30 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–π',
     '7 –∏—é–ª—è (–ü–¢), 19:30 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Parkking (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π –ø–∞—Ä–∫, 4)'),
    ('22 –∞–≤–≥—É—Å—Ç–∞, 12:13 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–æ–π',
     '22 –∞–≤–≥—É—Å—Ç–∞ (–í–¢), 12:13 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Unity –Ω–∞ –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–æ–π '
     '(–Ω–∞–±. –ö–∞—Ä–ø–æ–≤–∫–∏, 5–∫17)'),
    ('11 —Å–µ–Ω—Ç—è–±—Ä—è, 00:00 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ü–ª–æ—â–∞–¥–∏ –õ–µ–Ω–∏–Ω–∞',
     '11 —Å–µ–Ω—Ç—è–±—Ä—è (–ü–ù), 00:00 ‚Äî –¶–µ–Ω—Ç—Ä Kod (—É–ª. –ö–æ–º—Å–æ–º–æ–ª–∞, 2)'),
    ('18 –æ–∫—Ç—è–±—Ä—è, 23:59 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –°–µ–Ω–Ω–æ–π',
     '18 –æ–∫—Ç—è–±—Ä—è (–°–†), 23:59 ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Unity –Ω–∞ –°–µ–Ω–Ω–æ–π (–ø–µ—Ä. –ì—Ä–∏–≤—Ü–æ–≤–∞, 4)'),
    ('25 –Ω–æ—è–±—Ä—è, 11:11 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–æ–π',
     '25 –Ω–æ—è–±—Ä—è (–°–ë), 11:11 ‚Äî –î–≤–æ—Ä–µ—Ü –û–ª–∏–º–ø–∏—è (–õ–∏—Ç–µ–π–Ω—ã–π –ø—Ä., 14)'),
    ('31 –¥–µ–∫–∞–±—Ä—è, 23:59 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –Ω–∏–≥–¥–µ',
     '31 –¥–µ–∫–∞–±—Ä—è (–í–°), 23:59 ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –Ω–∏–≥–¥–µ')])
def test_game_dates_add_weekday_place(game_date, expected):
    """Test _game_dates_add_weekday_place func from app_vk."""
    assert _game_dates_add_weekday_place([game_date]) == [expected], (
        'In tested func datetime.datetime.now() is used! '
        'Due to this - if error caused by abbreviation for the day of the '
        'week - correct data according calendar in expected value or change '
        'date in game_date.')


@pytest.mark.parametrize('block, group_name, post, expected_url', [
    # Correct case: photo
    ('photo',
     'Alibi',
     {'attachments': [{'photo': {'sizes': [0, 1, 2, 3, {
        'url': 'http://url_1/'}]}}]},
     'http://url_1/'),
    # Correct case: album
    ('album',
     'Alibi',
     {'attachments': [{'album': {'thumb': {'sizes': [0, 1, 2, {
         'url': 'http://url_2/'}]}}}]},
     'http://url_2/'),
    # Incorrect case: AttributeError (Alibi default photo used)
    # post_image_url = '' - because 'block' has unexpected value
    ('unexpected_value',
     'Alibi',
     {'attachments': [{'album': {'thumb': {'sizes': [0, 1, 2, {
         'url': 'http://url_1/'}]}}}]},
     'https://sun9-46.userapi.com/impg/LiT08C2tWC-QeeYRDjHqaHRFyXNOYyhxFacXQA/'
     'JpfUXhL2n2s.jpg?size=674x781&quality=95&sign='
     'e8310f98da4ff095adb5e46ba20eef2d&type=album'),
    # Incorrect case: ValueError (Detectit default photo used)
    # post_image_url = '' - because URL doesn't start with "http"
    ('unexpected_value',
     'Detectit',
     {'attachments': [
         {'album': {'thumb': {'sizes': [0, 1, 2, {'url': 'not_http'}]}}}]},
     'https://sun9-40.userapi.com/impg/frYTaWRpxfjOS8eVZayKsugTQILb9MM0uYggNQ/'
     'UhQlYUWdBh0.jpg?size=800x768&quality=95&sign='
     'bb10ce9b1e4f2328a2382faba0981c2c&type=album')])
def test_get_post_image_url(block, group_name, post, expected_url):
    """Test _get_post_image_url func from app_vk."""
    assert _get_post_image_url(
        block=block, group_name=group_name, post=post) == expected_url


MESSAGE_GET_VK_CHAT_UPDATE: dict = {'items': [{'id': 2}]}


@pytest.mark.parametrize('last_message_id, expected', [
    (1, MESSAGE_GET_VK_CHAT_UPDATE),
    (2, None)])
def test_get_vk_chat_update(last_message_id, expected, mocker):
    """Test _get_vk_chat_update func from app_vk."""
    vk_bot_mock = mocker.Mock()
    vk_bot_mock.messages.getHistory.return_value = MESSAGE_GET_VK_CHAT_UPDATE
    assert _get_vk_chat_update(
        last_message_id=last_message_id,
        vk_bot=vk_bot_mock,
        vk_group_id=0) == expected


POSTS_GET_VK_WALL_UPDATE: dict = {'items': [{'id': 3}, {'id': 2}]}


@pytest.mark.parametrize('last_wall_id, expected', [
    (1, POSTS_GET_VK_WALL_UPDATE['items'][1]),
    (2, POSTS_GET_VK_WALL_UPDATE['items'][0]),
    (3, None)])
def test_get_vk_wall_update(last_wall_id, expected, mocker):
    """Test _get_vk_wall_update func from app_vk."""
    vk_bot_mock = mocker.Mock()
    vk_bot_mock.wall.get.return_value = POSTS_GET_VK_WALL_UPDATE
    assert _get_vk_wall_update(
        last_wall_id=last_wall_id,
        vk_bot=vk_bot_mock,
        vk_group=0) == expected


@pytest.mark.parametrize('group_name, expected', [
    ('Alibi', 'https://vk.com/alibigames?w=wall-40914100_0'),
    ('Detectit', 'https://vk.com/detectitspb?w=wall-219311078_0')
])
def test_make_link_to_post(group_name, expected):
    """Test _make_link_to_post func from app_vk."""
    assert _make_link_to_post(group_name=group_name, post_id=0) == expected


MESSAGE_NO_LOOKUP: str = '–ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
MESSAGE_GAME_REMINDER_LOOKUP: str = (
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–µ—Ç–µ–∫—Ç–∏–≤!\n\n'

    '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞, 27 –∞–ø—Ä–µ–ª—è, –ø—Ä–æ–π–¥—ë—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥–¥–µ-–Ω–∏–±—É–¥—å.\n'
    '–°–±–æ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 19:00, –≤ 19:30 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞.')
MESSAGE_TEAM_REGISTER_LOOKUP: str = (
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–µ—Ç–µ–∫—Ç–∏–≤!\n\n'

    f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã ¬´{TEAM_NAME}¬ª –≤ —Å–æ—Å—Ç–∞–≤–µ 4 –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '
    '17 –º–∞—è, 19:30 –≥–¥–µ-–Ω–∏–±—É–¥—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
    '–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å, –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. '
    '–ï—Å–ª–∏ –≤—ã –æ—Ç–º–µ–Ω—è–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –º–µ–Ω–µ–µ, —á–µ–º –∑–∞ —Å—É—Ç–∫–∏, –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è. '
    '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 123 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞.\n\n'

    '–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –Ω–æ–º–µ—Ä: 8-888-888-88-8.\n'
    '–ö–∞–∫–æ–π-–Ω–∏–±—É–¥—å –±–∞–Ω–∫, –Ω–∞ –∏–º—è –ò–º—è –§.\n'
    '‚ùó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∏—á–µ–≥–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n'

    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω/–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ :)')
PARSED_MESSAGE_GAME_REMINDER: str = (
    '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞, 27 –∞–ø—Ä–µ–ª—è, –ø—Ä–æ–π–¥—ë—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥–¥–µ-–Ω–∏–±—É–¥—å.\n\n'

    '–°–±–æ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 19:00, –≤ 19:30 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞.')
PARSED_MESSAGE_TEAM_REGISTER: str = (
    f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã ¬´{TEAM_NAME}¬ª –≤ —Å–æ—Å—Ç–∞–≤–µ 4 –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '
    '17 –º–∞—è, 19:30 –≥–¥–µ-–Ω–∏–±—É–¥—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n'

    '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ '
    f'–∏–≥—Ä–µ. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–æ–º–µ—Ä—É {TEAM_CAPITAN_PROP}'
    ' –≤ —Ä–∞–∑–º–µ—Ä–µ 123 —Ä—É–±–ª–µ–π.\n\n'

    '–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—è–µ—Ç —É—á–∞—Å—Ç–∏–µ –º–µ–Ω–µ–µ, —á–µ–º –∑–∞ —Å—É—Ç–∫–∏, –æ–ø–ª–∞—Ç–∞ –Ω–µ '
    '–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.\n\n'

    '–ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–∞–≤–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏, –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ '
    '–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ —Ü–µ–Ω–µ:\n'
    '¬∑ 500 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –¥–æ –¥–Ω—è –∏–≥—Ä—ã,\n'
    '¬∑ 600 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –≤ –¥–µ–Ω—å –∏–≥—Ä—ã.')


@pytest.mark.parametrize('group_name, message, parsed_message', [
    ('Alibi', MESSAGE_NO_LOOKUP, None),
    ('Alibi', MESSAGE_GAME_REMINDER_LOOKUP,
     f"üü£ Alibi{NL*2}{PARSED_MESSAGE_GAME_REMINDER}"),
    ('Alibi', MESSAGE_TEAM_REGISTER_LOOKUP,
     f"üü£ Alibi{NL*2}{PARSED_MESSAGE_TEAM_REGISTER}"),
    ('Detectit', MESSAGE_NO_LOOKUP, None),
    ('Detectit', MESSAGE_GAME_REMINDER_LOOKUP,
     f"‚ö´Ô∏è Detectit{NL*2}{PARSED_MESSAGE_GAME_REMINDER}"),
    ('Detectit', MESSAGE_TEAM_REGISTER_LOOKUP,
     f"‚ö´Ô∏è Detectit{NL*2}{PARSED_MESSAGE_TEAM_REGISTER}")])
def test_parse_message(group_name, message, parsed_message):
    """Test parse_message func from app_vk."""
    assert parse_message(
        group_name=group_name,
        message={'items': [{'text': message}]}) == parsed_message


@pytest.mark.skip(reason='Coming soon..')
def test_parse_post():
    """Test parse_post func from app_vk."""
    pass


def test_parse_post_checkin():
    """Test _parse_post_checkin func from app_vk."""
    assert _parse_post_checkin(
        group_name='Alibi',
        post_id=0,
        splitted_text=_split_abstracts(
            group_name='Alibi',
            text=A_EXAMPLE_CHECKIN['text'])) == [
                'üü£ Alibi',
                '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. India ',
                '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: ',
                'https://vk.com/app5619682_-40914100 ',
                '–î–µ–π—Å—Ç–≤—É–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞ –≤—Å—é –∫–æ–º–∞–Ω–¥—É! '
                '–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤ –Ω–µ–º —É—á–∞—Å—Ç–∏–µ, –Ω—É–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏ '
                '—Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏:',
                'https://vk.com/alibigames?w=wall-40914100_0',
                '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ –Ω–æ—á—å —Å 26 –Ω–∞ 27 –º–∞—Ä—Ç–∞.']


def test_parse_post_game_results():
    """Test _parse_post_game_results func from app_vk."""
    assert _parse_post_game_results(
        splitted_text=_split_abstracts(
            group_name='Alibi',
            text=A_EXAMPLE_GAME_RESULTS['text']),
        team_name='–í–∏–Ω—Ç–∞–∂–Ω—ã–π –≥–∞–∑–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä') == [
            'üü£ Alibi',
            '–ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –Ω–æ–≤—ã–µ –∏–≥—Ä—ã! –í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ '
            '–Ω–∞ –ì–æ—Ä—å–∫–æ–≤—Å–∫–æ–π –º—ã —Å –≤–∞–º–∏ –Ω–∞—á–∞–ª–∏ —Å–µ—Ä–∏—é India. –ò —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤—ã '
            '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–≤–æ–π –∏–≥—Ä—ã.',
            '‚ñ™5 –º–µ—Å—Ç–æ: ¬´–†–µ—á–µ–≤—ã–µ –∞—É—Ç–∏—Å—Ç—ã¬ª',
            '–ù—É, –±–ª–∞–≥–æ —Ä–µ—á—å –Ω–∞ –∏–≥—Ä–µ –Ω—É–∂–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å ‚Äî –≤—Å–µ '
            '–æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –ø–∏—Å—å–º–µ–Ω–Ω–æ–º –≤–∏–¥–µ. –ò —Å —ç—Ç–∏–º –∫–æ–º–∞–Ω–¥–∞ '
            '—Å–ø—Ä–∞–≤–∏–ª–∞—Å—å –æ—Ç–ª–∏—á–Ω–æ üéâ',
            '‚ñ™4 –º–µ—Å—Ç–æ: ¬´–ë–æ—Å—Å –º–æ–ª–æ–∫–æ—Å–æ—Å –∏ –∫–æ–º–ø–∞–Ω–∏—è¬ª',
            '–û—Ö —É–∂ —ç—Ç–æ—Ç –ø—è—Ç—ã–π —Ç—É—Ä‚Ä¶ –ù–æ –Ω–∞—à –æ–ø—ã—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: —Ç–µ, –∫—Ç–æ '
            '—É–≤–µ—Ä–µ–Ω–Ω–æ –¥–µ—Ä–∂–∞–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–π –∏–≥—Ä—ã, –Ω–µ –æ—Å–æ–±–µ–Ω–Ω–æ '
            '–ø–æ—Å—Ç—Ä–∞–¥–∞—é—Ç –æ—Ç –Ω–µ—É–¥–∞—á–∏ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ. –¢–∞–∫ –∏ –≤—ã—à–ª–æ üéä',
            '‚ñ™3 –º–µ—Å—Ç–æ: ¬´–ö–æ—Ç–∏–∫–∏ –ö–∏–∞–Ω—É –†–∏–≤–∑–∞¬ª',
            '–í—Å–µ–º –∫–æ—Ç–∏–∫–∞–º ‚Äî –ø–æ –º–µ–¥–∞–ª–∏. –ë—Ä–æ–Ω–∑–æ–≤–æ–π! üê±',
            '‚ñ™2 –º–µ—Å—Ç–æ: ¬´–ú—ã —Ç–∞–∫ –∏ –¥—É–º–∞–ª–∏¬ª',
            '–î—É–º–∞—Ç—å ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ. –•–æ—Ä–æ—à–æ –¥—É–º–∞—Ç—å ‚Äî –µ—â—ë –ª—É—á—à–µ. –û—Ç —ç—Ç–æ–≥–æ '
            '–±—ã–≤–∞—é—Ç –ø–µ—Ä–≤—ã–µ –º–µ—Å—Ç–∞, –Ω–∞–≥—Ä–∞–¥—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏—è—Ç–Ω—ã–µ —à—Ç—É–∫–∏ üòâ',
            '‚ñ™1 –º–µ—Å—Ç–æ: ¬´–í–∏–Ω—Ç–∞–∂–Ω—ã–π –≥–∞–∑–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä¬ª',
            '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –º—ã—Å–ª–∏ –∏ '
            '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ü•Ç',
            '#medal #gold_medal']


"""
Skipped tests.
The tested functions call other functions that use the VkApi.method.
"""
SKIP_REASON_VK_API: str = (
    'Currently no way to test it: '
    'call other function that use the VkApi.method!')


@pytest.mark.skip(reason=SKIP_REASON_VK_API)
def test_init_vk_bot() -> None:
    """Test init_vk_bot func from app_vk."""
    pass


@pytest.mark.skip(reason=SKIP_REASON_VK_API)
def test_get_vk_chat_update_groups():
    """Test get_vk_chat_update_groups func from app_vk."""
    pass


@pytest.mark.skip(reason=SKIP_REASON_VK_API)
def test_get_vk_wall_update_groups():
    """Test get_vk_wall_update_groups func from app_vk."""
    pass
